import allure

@allure.title("–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ id")
@allure.description("–ü–æ–∏—Å–∫")
@allure.id(1)
@allure.severity("Critical")
def test_find_by_id(api, test_data: dict):
    id_product = test_data.get("id")
    find = api.find_by_id(id_product)

    # üîç –û—Ç–ª–∞–¥–∫–∞
    print("Status code:", find.status_code)
    print("Request URL:", find.url)

    assert find.status_code == 200, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {find.status_code}" #–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å

    json_data = find.json() #–ü–∞—Ä—Å–∏–º JSON

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç"):
        assert len(json_data) > 0
    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É"):
        assert json_data['included'][0]['id'] == id_product
    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É"):
        json_data['included'][0]['attributes']['title'] == '–ò–¥–∏–æ—Ç'
    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≥–æ–¥ –≤—ã—Ö–æ–¥–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É"):
        json_data['included'][0]['attributes']['yearPublishing'] == 2025


@allure.title("–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É")
@allure.description("–ü–æ–∏—Å–∫")
@allure.id(2)
@allure.severity("Critical")
def test_find_by_title(api, test_data: dict):
    title = test_data.get("title")
    find = api.find_by_title(title)

    # üîç –û—Ç–ª–∞–¥–∫–∞
    print("Status code:", find.status_code)
    print("Request URL:", find.url)

    assert find.status_code == 200, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {find.status_code}" #–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å

    json_data = find.json() #–ü–∞—Ä—Å–∏–º JSON

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç"):
        assert len(json_data['included']) > 0, "–°–ø–∏—Å–æ–∫ included –ø—É—Å—Ç"

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É"):
        assert json_data['included'][0]['attributes']['title'] == '–ò–¥–∏–æ—Ç', \
            f"–û–∂–∏–¥–∞–ª–æ—Å—å '–ò–¥–∏–æ—Ç', –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {json_data['included'][0]['attributes']['title']}"

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É"):
        assert json_data['included'][0]['attributes']['yearPublishing'] == 2025, \
            f"–û–∂–∏–¥–∞–ª—Å—è –≥–æ–¥ 2025, –Ω–æ –ø–æ–ª—É—á–µ–Ω {json_data['included'][0]['attributes']['yearPublishing']}"


@allure.title("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–∏–≥")
@allure.description("–ü–æ–∏—Å–∫")
@allure.id(3)
@allure.severity("Critical")
def test_find_popular_books(api, test_data: dict):
    filter = test_data.get("filter_book")
    find = api.find_popular_books(filter)

    # üîç –û—Ç–ª–∞–¥–∫–∞
    print("Status code:", find.status_code)
    print("Request URL:", find.url)

    assert find.status_code == 200, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {find.status_code}"  #–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å

    json_data = find.json() #–ü–∞—Ä—Å–∏–º JSON

    print(json_data)

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç"):
        assert len(json_data) > 0

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞"):
        assert json_data['data'][0]['attributes']['authors'][0]['lastName'] == "–ö–∞–≤–∞–º—É—Ä–∞", \
            f"–û–∂–∏–¥–∞–ª—Å—è –∞–≤—Ç–æ—Ä –ö–∞–≤–∞–º—É—Ä–∞, –Ω–æ –æ–∫–∞–∑–∞–ª—Å—è {json_data['data'][0]['attributes']['authors'][0]['lastName']}"


@allure.title("–ü–æ–∏—Å–∫ –∞–≤—Ç–æ—Ä–∞")
@allure.description("–ü–æ–∏—Å–∫")
@allure.id(4)
@allure.severity("Critical")
def test_find_author(api, test_data: dict):
    author = test_data.get("author")
    find = api.find_author(author)

    print("Response body:", find.text)
    print("Request URL:", find.url)
    print("Status code:", find.status_code)
    print("Response headers:", find.headers)

    assert find.status_code == 200, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {find.status_code}" #–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å

    json_data = find.json() #–ü–∞—Ä—Å–∏–º JSON

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç"):
        assert len(json_data) > 0

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞"):
        assert json_data['data'][0]['attributes']['title'] == "–§–µ–¥–æ—Ä –ú–∏—Ö–∞–π–ª–æ–≤–∏—á –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π"

    print(json_data)


@allure.title("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É")
@allure.description("–ü–æ–∏—Å–∫")
@allure.id(5)
@allure.severity("Critical")
def test_add_to_cart(api,test_data: dict):
    json_id = test_data.get("json_id")
    add = api.add_to_cart(json_id)

    print("Response body:", add.text)
    print("Request URL:", add.url)
    print("Status code:", add.status_code)
    print("Response headers:", add.headers)

    assert add.status_code == 200, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {add.status_code}"  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å


@allure.title("–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã")
@allure.description("–ü–æ–∏—Å–∫")
@allure.id(6)
@allure.severity("Critical")
def test_viewing_cart(api):
    view = api.viewing_cart()

    print("Response body:", view.text)
    print("Request URL:", view.url)
    print("Status code:", view.status_code)
    print("Response headers:", view.headers)

    assert view.status_code == 200, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {view.status_code}"  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å

    json_data = view.json()  # –ü–∞—Ä—Å–∏–º JSON

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç"):
        assert len(json_data) > 0


@allure.title("–ü—Ä–æ—Å–º–æ—Ç—Ä id —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –∫–æ—Ä–∑–∏–Ω—ã")
@allure.description("–ü–æ–∏—Å–∫")
@allure.id(7)
@allure.severity("Critical")
def test_viewing_cart(api):
    view = api.short_viewing_cart()

    print("Response body:", view.text)
    print("Request URL:", view.url)
    print("Status code:", view.status_code)
    print("Response headers:", view.headers)

    assert view.status_code == 200, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {view.status_code}"  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å

    json_data = view.json()  # –ü–∞—Ä—Å–∏–º JSON

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç"):
        assert len(json_data) > 0


@allure.title("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
@allure.description("–ü–æ–∏—Å–∫")
@allure.id(8)
@allure.severity("Critical")
def test_delete_to_cart(api, test_data: dict):
    id_product = test_data.get("id_product")
    delete = api.delete_to_cart(id_product)

    print("Response body:", delete.text)
    print("Request URL:", delete.url)
    print("Status code:", delete.status_code)
    print("Response headers:", delete.headers)

    assert delete.status_code == 204, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {delete.status_code}"  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å


@allure.title("–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã")
@allure.description("–ü–æ–∏—Å–∫")
@allure.id(9)
@allure.severity("Critical")
def test_clearing_cart(api):
    delete = api.clearing_cart()

    print("Response body:", delete.text)
    print("Request URL:", delete.url)
    print("Status code:", delete.status_code)
    print("Response headers:", delete.headers)

    assert delete.status_code == 204, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {delete.status_code}"  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å


@allure.title("–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã")
@allure.description("–ü–æ–∏—Å–∫")
@allure.id(10)
@allure.severity("Critical")
def test_restore_product(api, test_data: dict):
    productId = test_data.get("productId")
    restore = api.restore_product(productId)


    print("Request URL:", restore.url)
    print("Status code:", restore.status_code)
    print("Response headers:", restore.headers)

    assert restore.status_code == 200, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {restore.status_code}"  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å